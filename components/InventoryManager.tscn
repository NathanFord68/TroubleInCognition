[gd_scene load_steps=2 format=3 uid="uid://cb6j8uulg0bya"]

[sub_resource type="GDScript" id="GDScript_b0epa"]
resource_name = "InventoryManager"
script/source = "extends Node

const backpack_max_size : int = 100
var backpack : Array[Item] = []

var head : Item
var chest : Item
var legs : Item
var feet : Item
var ammo : Item
var cape : Item
var gloves : Item
var primary_hand : Item
var secondary_hand : Item
var ring : Item

func _ready():
	%Inventory.item_dropped.connect(handle_item_dropped)

func handle_item_dropped(t: Item.TYPE, item: Item):
	if t == Item.TYPE.MAIN:
		equipment_to_inventory()
		return
	
	inventory_to_equipment(t, item)
	
func inventory_to_equipment(t: Item.TYPE, item: Item):
	item.name = str(t)
	item.get_node(\"AnimationTree\").active = true
	item.get_node(\"WorldGen\").visible = false
	item.get_node(\"PlayerGen\").visible = true
	$\"../Equipment\".add_child(item)
	
	
	
func equipment_to_inventory():
	pass

func add_to_inventory(item, index = -1):
	var i : int = index
	
	if index == -1:
		# Find the lowest index and set i equal to
		i = backpack.size()
	
	# Check that what we are trying is valid
	if i >= backpack_max_size:
		# Let the player know their inventory is full
		print(\"Inventory is too large\")
		return
	
	# Check if the slot is already taken
	if backpack.size() > 0 and !is_instance_valid(backpack[i]):
		__swap_items(item, i)
		return
	
	# Insert the item to last slot
	backpack.push_back(item)
	
	# Update the inventory UI with our image
	%Inventory.get_backpack().get_children()[i].item = item
	%Inventory.get_backpack().get_children()[i].update_icon()
	
	
func __swap_items(item : Item, index : int):
	pass
	
func debug_print():
	for item in backpack:
		print_debug(item)
"

[node name="InventoryManager" type="Node"]
process_mode = 3
script = SubResource("GDScript_b0epa")
