[gd_scene load_steps=2 format=3 uid="uid://j388a8vp1fd6"]

[sub_resource type="GDScript" id="GDScript_vb8bp"]
resource_name = "playercontroller"
script/source = "extends Node2D

@onready var player = get_parent()

func handle_interact():
	# Get the object at that position
	var hit = point_to_mouse()
	
	if !is_instance_valid(hit):
		return
	
	# TODO fix issue with objects being between what I'm trying to pick up
	# Ray Trace to position to see if we can reach
	if hit != trace_to_mouse(20, true):
		return
	
	# Check that we can interact with it
	if \"Interact\" not in hit.get_groups():
		return
	
	# Call interact method if it has it
	hit._interact(player)

func handle_main_hand_action():
	# Return if nothing is equipped
	if !is_instance_valid(player.equipped):
		return
	
	# Get the item we're hitting
	var hit = trace_to_mouse(player.equipped.range, true)
	
	if not hit:
		return
	# Checking the two objects are compatible
	var can_action = false
	for g in hit.get_groups():
		if g in $\"../Eqipment\".get_node(str(Item.TYPE.PRIMARY)).can_action_with:
			can_action = true
			break
	
	# Calling the action function if they are
	if can_action:
		player.get_node(\"Animationcontroller\").handle_swing()
		hit.action(player)
		
func point_to_mouse():
	# Get world space physics
	var space = get_world_2d().direct_space_state
	
	# Create query
	var query = PhysicsPointQueryParameters2D.new()
	query.exclude = [ player ]
	query.position = player.get_global_mouse_position()
	
	# Cast the query
	var hit = space.intersect_point(query)
	
	# Return hit objects
	if hit.size() > 0:
		return hit[0].collider
	
	return null

func trace_to_mouse(reach, visualize):
		
	# Normalize to mouse position
	var click_normalized : Vector2 = player.global_position.direction_to(player.get_global_mouse_position())
	
	# Get world space physics
	var space = get_world_2d().direct_space_state
	
	# Create the query
	var end = player.global_position + (click_normalized * reach )
	var query = PhysicsRayQueryParameters2D.create(player.global_position, end)
	query.exclude = [self]
	
	# Cast the query
	var hit = space.intersect_ray(query)
	
	# Visualize if true
	if visualize:
		visualize_ray_cast(player.global_position, end)
	
	# Return collider if hit
	if \"collider\" in hit:
		return hit.collider
	
	return null

func visualize_ray_cast(start, end):
	if is_instance_valid(get_node(\"PlayerRayCast\")):
		get_node(\"PlayerRayCast\").points = [start, end]
		return
	
	var line_node = Line2D.new()
	line_node.name = \"PlayerRayCast\"
	line_node.points = [start, end]
	line_node.width = 2
	line_node.top_level = true
	add_child(line_node)

func debug():
	$\"../InventoryManager\".debug_print()
"

[node name="Playercontroller" type="Node2D"]
script = SubResource("GDScript_vb8bp")
